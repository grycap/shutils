#!/bin/bash
# The MIT License (MIT)
# 
# Copyright (c) 2015 GRyCAP
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# Installation:
# incluir en el fichero /etc/hosts.deny la siguiente linea:
# ALL:/path/to/lista_negra
#
# incluir en el fichero /etc/hosts.allow la siguiente linea:
# sshd:ALL EXCEPT /path/to/lista_negra:spawn ( /path/to/ssh_block -w /path/to/whitelist -l /path/to/auth -m <max occurrences allowed> & )
#
# copiar el ejecutable en /usr/bin/ssh_block
#
# $ mkdir -p /etc/sshblock/
# $ touch /etc/sshblock/blacklist
# $ touch /etc/sshblock/whitelist

OCURRENCIAS_MAXIMAS=5
FILTER_DATE=TRUE
LOGFILE=/var/log/auth.log
BLOCKED_IPS_FILE=/etc/sshblock/blacklist
WHITELIST_FILE=/etc/sshblock/whitelist
BLACKLIST_IPS=TRUE

function error() {
        echo "[ERROR] $@"
        exit -1

}

function usage() {
    echo "* Creates a blacklist according to a ssh logfile"
    echo -e "\tYou should the next line to the file /etc/hosts.deny"
    echo -e "\t\tALL:/etc/sshblock/blacklist"
    echo -e "\tYou must add the next line to the file /etc/hosts.allow"
    echo -e "\t\tsshd:ALL EXCEPT /etc/sshblock/blacklist:spawn ( /usr/local/bin/sshblock -w /etc/sshblock/whitelist -l /var/log/auth -m 5 & )"
    echo 
    echo -e "\tusage: $0 [ -i ][ -l <logfile> ] [ -w <whitelist path> ] [ -b <blacklist path> ] [ -m <max occurrences allowed> ] [ -v ] "
    echo -e "\t-l\tpath to the 'auth' log file (default: /var/log/auth.log)"
    echo -e "\t-w\tpath to the whitelist file (default: /etc/sshblock/whitelist)"
    echo -e "\t-b\tpath to the blacklist file (default: /etc/sshblock/blacklist)"
    echo -e "\t-m\tnumber of errors allowed to appear in the log file"
    echo -e "\t-i\tinstalls the application"
    echo -e "\t-h\tshows this help and exits"
}

USERNAME=
VERBOSE=FALSE
while [ $# -ge 1 ]; do
        case $1 in
        -l|--log-file)      [ $# -le 1 ] && error "falta el fichero a analizar"
                        shift
                        LOGFILE=$1;;
        -w|--whitelist-file)      [ $# -le 1 ] && error "falta el fichero de lista blanca"
                        shift
                        WHITELIST_FILE=$1;;
        -b|--blacklist-file)      [ $# -le 1 ] && error "falta el fichero de lista negra"
                        shift
                        BLOCKED_IPS_FILE=$1;;
        -nf|--no-filter) 
                        FILTER_DATE=FALSE;;
        -v|--verbose)   VERBOSE=TRUE;;
	-m|--max-occurrences)
			[ $# -le 1 ] && error "falta el numero de ocurrencias maximas"
			shift
			OCURRENCIAS_MAXIMAS=$1;;
	-nb|--no-blacklist)
			BLACKLIST_IPS=FALSE;;
        -h|--help)      
			usage && exit 0;;
        -i|--install)
                        echo "INSTALLING"
                        echo "WARNING: installing modifies critical files: /etc/hosts.allow and /etc/hosts.deny"
                        echo "         I will back up them first, but there is a chance of failure"
                        read -p "Continue? (yes/NO) " CONTINUE
                        if [ "$CONTINUE" == "yes" ]; then
                            TS=$(date +%Y%M%d%H%m%S)
                            cp /etc/hosts.deny /etc/hosts.deny.$TS
                            cp /etc/hosts.allow /etc/hosts.allow.$TS
                            echo "ALL:/etc/sshblock/blacklist" >> /etc/hosts.deny
                            echo "sshd:ALL EXCEPT /etc/sshblock/blacklist:spawn ( /usr/local/bin/sshblock -w /etc/sshblock/whitelist -l /var/log/auth -m 5 & )" >> /etc/hosts.allow
                            echo "I tried to leave a copy of files in /etc/hosts.deny.$TS and /etc/hosts.allow.$TS"
                            exit 0
                        else
                            echo "aborting (you should answer yes not only $CONTINUE)"
                            exit 1
                        fi;;
        *)              error "comando no esperado $1";;
        esac
        shift
done

ALLOWED_IPS=$(cat $WHITELIST_FILE 2> /dev/null)
WORKING_FILE=$(tempfile)
DIA=$(date +%e)
MES=$(date +%b)

# puesto en el codigo va muy lento
#IS_IN_WHITELIST=FALSE
#for i in $ALLOWED_IPS; do
#	PATTERN=$(echo $i | sed "s/\./\\\./g")
#	IN_WHITELIST=$(echo $IP | grep -e $PATTERN)
#	if [ "$IN_WHITELIST" != "" ]; then
#		IS_IN_WHITELIST=TRUE
#	fi
#done
#
#exit

if [ "$FILTER_DATE" == "TRUE" ]; then
	cat $LOGFILE | grep "^$MES $DIA" | grep sshd | grep Failed > $WORKING_FILE
else
	cat $LOGFILE | grep sshd | grep Failed > $WORKING_FILE
fi

IPS=$(cat $WORKING_FILE | sed 's/\(.*\) \([0-9]*\.[0-9]*\.[0-9]*\.[0-9]*\) \(.*\)/\2/' | sort -u)
for IP in $IPS; do
	VECES_IP=$(cat $WORKING_FILE | grep $IP | wc -l)
	if [ $VECES_IP -gt $OCURRENCIAS_MAXIMAS ]; then
		IN_WHITELIST=$(echo $ALLOWED_IPS | grep $IP)
		IS_IN_WHITELIST=FALSE
		[ "$IN_WHITELIST" != "" ] && IS_IN_WHITELIST=TRUE

		if [ "$IS_IN_WHITELIST" == "FALSE" ]; then
			IS_BLOCKED=$(cat $BLOCKED_IPS_FILE 2> /dev/null | grep $IP)
			if [ "$IS_BLOCKED" == "" ]; then
				if [ "$BLACKLIST_IPS" == "TRUE" ]; then
					logger "[ssh_block] blocking IP $IP because it has $VECES_IP tryouts"
					echo $IP 2> /dev/null >> $BLOCKED_IPS_FILE
					[ $? -ne 0 ] && logger "[ssh_block] ERROR adding $IP to blacklist"
				else
					[ "$VERBOSE" == "TRUE" ] && echo "no blacklisting IP $IP even it has $VECES_IP tryouts"
				fi
			fi
		else
			[ "$VERBOSE" == "TRUE" ] && echo "would block $IP but it is in whitelist"
		fi
	fi
done
rm $WORKING_FILE
